#include-once
#include <WindowsConstants.au3>
#include <GUIConstants.au3>
#include <GuiEdit.au3>
#include <GuiRichEdit.au3>
#include <GuiListBox.au3>
#include <StringConstants.au3>
#include <Array.au3>
#include <WinAPIGdi.au3>
#include <FontConstants.au3>
#include <WinAPISys.au3>
#include <SQLite.au3>

; Logging-Funktionen aus dem Hauptprojekt einbinden
#include "logging.au3"
; Zentrale SQL-Keyword-Definitionen
#include "sql_keywords.au3"

; In globals.au3 definierte Variablen
Global $g_hGUI                  ; Handle des Hauptfensters
Global $g_bSQLEditorMode        ; Flag, ob der SQL-Editor-Modus aktiv ist
Global $g_hSQLRichEdit          ; Handle des RichEdit-Controls
Global $g_aTableColumns         ; Array mit Spaltennamen für die aktuelle Tabelle
Global $g_sCurrentDB            ; Aktuelle Datenbank
Global $g_idStatus              ; ID für Statustext
Global $g_idTableCombo          ; ID der Tabellen-ComboBox
Global $g_sCurrentTable         ; Aktuell ausgewählte Tabelle

; Globale Variablen für SQL-Autovervollständigung
Global $g_hList = 0             ; Handle der Autovervollständigungs-Liste
Global $g_sCurrentWord = ""     ; Aktuelles Wort unter dem Cursor
Global $g_iLastCursorPos = -1   ; Letzte Cursor-Position
Global $g_iWordStartPos = -1    ; Startposition des aktuellen Worts
Global $g_iWordEndPos = -1      ; Endposition des aktuellen Worts
Global $g_iListIndex = 0        ; Aktuell ausgewählter Eintrag in der Autovervollständigungsliste
Global $g_bAutoCompleteActive = False ; Status der Autovervollständigung
Global $g_hListGUICtrlHandle    ; GUICtrl-Handle des ListBox-Controls

; ===============================================================================================================================
; Func.....: _InitSQLAutoComplete
; Beschreibung: Initialisiert die SQL-Autovervollständigung
; Parameter.: $hGUI - Handle des Hauptfensters
;             $hRichEdit - Handle des RichEdit-Controls
; Rückgabe..: True bei Erfolg, False bei Fehler
; ===============================================================================================================================
Func _InitSQLAutoComplete($hGUI, $hRichEdit)
    _LogInfo("Initialisiere SQL-Autovervollständigung")

    ; Globale Variablen setzen
    $g_hGUI = $hGUI
    $g_hSQLRichEdit = $hRichEdit

    If Not IsHWnd($g_hGUI) Or Not IsHWnd($g_hSQLRichEdit) Then
        _LogError("Autovervollständigung: Ungültige Fenster-Handles")
        Return False
    EndIf
    
    ; Bestehende Instanz der Liste entfernen, falls vorhanden
    If $g_hList <> 0 Then
        _StopSQLAutoComplete()
    EndIf

    ; Erstelle das Vorschlagsliste-Fenster
    Local $iWidth = 250
    Local $iHeight = 120

    ; ListBox für Vorschläge erstellen (anfangs versteckt)
    $g_hListGUICtrlHandle = GUICtrlCreateList("", 0, 0, $iWidth, $iHeight, BitOR($WS_BORDER, $WS_VSCROLL, $LBS_NOTIFY, $LBS_NOINTEGRALHEIGHT))
    $g_hList = GUICtrlGetHandle($g_hListGUICtrlHandle)
    
    ; Schriftart und Farbe anpassen
    Local $hFont = _WinAPI_CreateFont(10, 0, 0, 0, 400, False, False, False, $DEFAULT_CHARSET, $OUT_DEFAULT_PRECIS, $CLIP_DEFAULT_PRECIS, $DEFAULT_QUALITY, $DEFAULT_PITCH, "Consolas")
    If $hFont Then _WinAPI_SetFont($g_hList, $hFont)
    
    ; Z-Order setzen, damit die Liste ÜBER allem anderen liegt
    _WinAPI_SetWindowPos($g_hList, $HWND_TOPMOST, 0, 0, 0, 0, BitOR($SWP_NOMOVE, $SWP_NOSIZE))
    
    ; Ausblenden für Start
    GUICtrlSetState($g_hListGUICtrlHandle, $GUI_HIDE)

    _LogInfo("SQL-Autovervollständigung initialisiert")
    Return True
EndFunc

; ===============================================================================================================================
; Func.....: _StartSQLAutoComplete
; Beschreibung: Aktiviert die Autovervollständigung und registriert die Timer-Funktion
; Parameter.: Keine
; Rückgabe..: Keine
; ===============================================================================================================================
Func _StartSQLAutoComplete()
    _LogInfo("Aktiviere SQL-Autovervollständigung")

    ; Sicherstellen, dass die Liste existiert
    If $g_hList = 0 Or Not IsHWnd($g_hList) Then
        _InitSQLAutoComplete($g_hGUI, $g_hSQLRichEdit)
    EndIf

    ; Überwachungsfunktion registrieren - höhere Frequenz für bessere Reaktionsfähigkeit
    AdlibRegister("_CheckSQLInputForAutoComplete", 50)

    ; Status zurücksetzen
    $g_iLastCursorPos = -1
    $g_sCurrentWord = ""
    $g_iWordStartPos = -1
    $g_iWordEndPos = -1
    $g_bAutoCompleteActive = True

    _LogInfo("SQL-Autovervollständigung aktiviert")
EndFunc

; ===============================================================================================================================
; Func.....: _StopSQLAutoComplete
; Beschreibung: Deaktiviert die Autovervollständigung
; Parameter.: Keine
; Rückgabe..: Keine
; ===============================================================================================================================
Func _StopSQLAutoComplete()
    _LogInfo("Deaktiviere SQL-Autovervollständigung")

    ; Überwachungsfunktion deregistrieren
    AdlibUnRegister("_CheckSQLInputForAutoComplete")

    ; Liste ausblenden und vollständig entfernen
    If $g_hList <> 0 And IsHWnd($g_hList) Then
        ; Zuerst ausblenden
        GUICtrlSetState($g_hListGUICtrlHandle, $GUI_HIDE)
        
        ; Kurze Pause, damit GUI aktualisiert wird
        Sleep(50)
        
        ; Dann löschen
        GUICtrlDelete($g_hListGUICtrlHandle)
        $g_hList = 0
        $g_hListGUICtrlHandle = 0
        
        ; Gesamtes Anwendungsfenster neu zeichnen um Artefakte zu beseitigen
        _WinAPI_RedrawWindow($g_hGUI, 0, 0, BitOR($RDW_INVALIDATE, $RDW_ERASE, $RDW_FRAME, $RDW_ALLCHILDREN, $RDW_UPDATENOW))
        Sleep(50) ; Kurze Pause um sicherzustellen, dass die Zeichenoperation abgeschlossen ist
    EndIf

    ; Status zurücksetzen
    $g_bAutoCompleteActive = False

    _LogInfo("SQL-Autovervollständigung deaktiviert")
EndFunc

; ===============================================================================================================================
; Func.....: _CheckSQLInputForAutoComplete
; Beschreibung: Überwacht die Texteingabe und aktualisiert die Autovervollständigungsliste
; Parameter.: Keine
; Rückgabe..: Keine
; ===============================================================================================================================
Func _CheckSQLInputForAutoComplete()
    ; Nur fortfahren, wenn SQL-Editor aktiv ist und Autovervollständigung aktiviert
    If Not $g_bSQLEditorMode Or Not $g_bAutoCompleteActive Then Return
    If Not IsHWnd($g_hSQLRichEdit) Then Return

    ; Zuerst prüfen wir direkt auf Tastaturinteraktionen (Pfeil hoch/runter, Enter, Tab)
    ; wenn die Liste angezeigt wird
    If $g_hList <> 0 And IsHWnd($g_hList) And BitAND(GUICtrlGetState($g_hListGUICtrlHandle), $GUI_SHOW) = $GUI_SHOW Then
        ; ESC-Taste überprüfen
        If _IsPressed("1B") Then ; VK_ESCAPE
            _LogInfo("ESC-Taste direkt erkannt - Liste ausblenden")
            GUICtrlSetState($g_hListGUICtrlHandle, $GUI_HIDE)
            Sleep(100) ; Kurze Pause, um mehrfache Verarbeitung zu vermeiden
            Return
        EndIf

        ; Pfeiltasten überprüfen
        If _IsPressed("28") Then ; VK_DOWN (Pfeil runter)
            _LogInfo("Pfeil runter direkt erkannt - Nächster Eintrag")
            $g_iListIndex += 1
            If $g_iListIndex >= _GUICtrlListBox_GetCount($g_hList) Then $g_iListIndex = 0
            _GUICtrlListBox_SetCurSel($g_hList, $g_iListIndex)
            Sleep(150) ; Verzögerung, um zu schnelles Scrollen zu vermeiden
            Return
        ElseIf _IsPressed("26") Then ; VK_UP (Pfeil hoch)
            _LogInfo("Pfeil hoch direkt erkannt - Vorheriger Eintrag")
            $g_iListIndex -= 1
            If $g_iListIndex < 0 Then $g_iListIndex = _GUICtrlListBox_GetCount($g_hList) - 1
            _GUICtrlListBox_SetCurSel($g_hList, $g_iListIndex)
            Sleep(150) ; Verzögerung, um zu schnelles Scrollen zu vermeiden
            Return
        EndIf

        ; Enter oder Tab zum Übernehmen der Auswahl
        If _IsPressed("0D") Or _IsPressed("09") Then ; VK_RETURN oder VK_TAB
            _LogInfo("Enter/Tab direkt erkannt - Auswahl übernehmen")
            _AcceptSQLAutoCompleteSelection()
            Sleep(150) ; Pause nach Auswahl
            Return
        EndIf
    EndIf

    ; Aktuelle Cursor-Position abrufen
    Local $aSel = _GUICtrlRichEdit_GetSel($g_hSQLRichEdit)
    If @error Then Return

    Local $iCursorPos = $aSel[0]

    ; Nur bei Änderung der Cursor-Position fortfahren
    If $iCursorPos = $g_iLastCursorPos Then Return
    $g_iLastCursorPos = $iCursorPos

    ; Text abrufen und aktuelles Wort ermitteln
    Local $sText = _GUICtrlRichEdit_GetText($g_hSQLRichEdit)

    ; Aktuelles Wort unter dem Cursor ermitteln
    $g_sCurrentWord = _GetCurrentWord($sText, $iCursorPos, $g_iWordStartPos)
    $g_iWordEndPos = $iCursorPos

    ; Vorschläge erzeugen
    Local $aMatches = _GetSQLMatches($sText, $iCursorPos)
    
    ; Zeige oder verstecke die Autovervollständigungsliste
    If UBound($aMatches) > 0 Then
        _ShowAutoCompleteList($aMatches)
    Else
        ; Bei keinen Vorschlägen die Liste ausblenden
        If $g_hList <> 0 And IsHWnd($g_hList) Then
            GUICtrlSetState($g_hListGUICtrlHandle, $GUI_HIDE)
            ; Neu zeichnen um Artefakte zu vermeiden
            _WinAPI_RedrawWindow($g_hGUI, 0, 0, BitOR($RDW_INVALIDATE, $RDW_ERASE, $RDW_ALLCHILDREN, $RDW_UPDATENOW))
        EndIf
    EndIf
EndFunc

; ===============================================================================================================================
; Func.....: _GetSQLMatches
; Beschreibung: Filtert die SQL-Keywords und gibt ein Array mit passenden Vorschlägen zurück
; Parameter.: $sText - Der komplette Text im Editor
;             $iCursorPos - Die aktuelle Cursor-Position
; Rückgabe..: Array mit passenden Vorschlägen
; ===============================================================================================================================
Func _GetSQLMatches($sText, $iCursorPos)
    Local $aMatches[0] ; Array für eindeutige Vorschläge
    
    ; Wenn kein aktuelles Wort, keine Vorschläge
    If $g_sCurrentWord = "" Then Return $aMatches
    
    Local $sUpperCurrentWord = StringUpper($g_sCurrentWord)
    
    ; Debug-Ausgabe hinzufügen
    _LogInfo("Suche nach Matches für: '" & $g_sCurrentWord & "'")
    
    ; Schritt 1: Prüfe auf exakte Übereinstimmung mit einem einzelnen Keyword
    Local $bExactMatchFound = False
    Local $sExactMatch = ""
    
    ; Exakten Match in Keywords suchen
    For $i = 0 To UBound($g_aSQL_AllKeywords) - 1
        If StringUpper($g_aSQL_AllKeywords[$i]) = $sUpperCurrentWord Then
            ; Exakter Match gefunden - nur diesen verwenden
            $sExactMatch = $g_aSQL_AllKeywords[$i]
            $bExactMatchFound = True
            _LogInfo("Exakte Übereinstimmung mit Keyword: " & $sExactMatch)
            _ArrayAdd($aMatches, $sExactMatch)
            ExitLoop
        EndIf
    Next
    
    ; Wenn kein exakter Match gefunden wurde, partielle Matches prüfen
    If Not $bExactMatchFound Then
        ; SQL-Keywords prüfen
        For $i = 0 To UBound($g_aSQL_AllKeywords) - 1
            If StringLeft(StringUpper($g_aSQL_AllKeywords[$i]), StringLen($sUpperCurrentWord)) = $sUpperCurrentWord Then
                ; Nur hinzufügen, wenn noch nicht im Array
                If _ArraySearch($aMatches, $g_aSQL_AllKeywords[$i]) = -1 Then
                    _ArrayAdd($aMatches, $g_aSQL_AllKeywords[$i])
                    _LogInfo("Keyword-Match hinzugefügt: " & $g_aSQL_AllKeywords[$i])
                EndIf
            EndIf
        Next
        
        ; SQL-Funktionen prüfen
        For $i = 0 To UBound($g_aSQL_Functions) - 1
            If StringLeft(StringUpper($g_aSQL_Functions[$i]), StringLen($sUpperCurrentWord)) = $sUpperCurrentWord Then
                ; Nur hinzufügen, wenn noch nicht im Array
                If _ArraySearch($aMatches, $g_aSQL_Functions[$i]) = -1 Then
                    _ArrayAdd($aMatches, $g_aSQL_Functions[$i])
                    _LogInfo("Funktions-Match hinzugefügt: " & $g_aSQL_Functions[$i])
                EndIf
            EndIf
        Next
        
        ; SQL-Datentypen prüfen
        For $i = 0 To UBound($g_aSQL_DataTypes) - 1
            If StringLeft(StringUpper($g_aSQL_DataTypes[$i]), StringLen($sUpperCurrentWord)) = $sUpperCurrentWord Then
                ; Nur hinzufügen, wenn noch nicht im Array
                If _ArraySearch($aMatches, $g_aSQL_DataTypes[$i]) = -1 Then
                    _ArrayAdd($aMatches, $g_aSQL_DataTypes[$i])
                    _LogInfo("Datentyp-Match hinzugefügt: " & $g_aSQL_DataTypes[$i])
                EndIf
            EndIf
        Next
        
        ; Tabellennamen prüfen und IMMER hinzufügen
        _LogInfo("Prüfe Tabellennamen für Matches...")
        Local $sTables = GUICtrlRead($g_idTableCombo, 1)
        If $sTables <> "" Then
            _LogInfo("Verfügbare Tabellen: " & $sTables)
            Local $aTableList = StringSplit($sTables, "|", $STR_NOCOUNT)
            For $i = 0 To UBound($aTableList) - 1
                If $aTableList[$i] <> "" Then
                    ; Entweder wenn es mit dem Suchbegriff beginnt oder wir im FROM/JOIN-Kontext sind
                    If StringLen($sUpperCurrentWord) = 0 Or StringLeft(StringUpper($aTableList[$i]), StringLen($sUpperCurrentWord)) = $sUpperCurrentWord Then
                        ; Nur hinzufügen, wenn noch nicht im Array
                        If _ArraySearch($aMatches, $aTableList[$i]) = -1 Then
                            _ArrayAdd($aMatches, $aTableList[$i])
                            _LogInfo("Tabellennamen-Match hinzugefügt: " & $aTableList[$i])
                        EndIf
                    EndIf
                EndIf
            Next
        Else
            _LogInfo("Keine Tabellen verfügbar")
        EndIf
        
        ; Spaltennamen prüfen und IMMER hinzufügen
        _LogInfo("Prüfe Spaltennamen für Matches...")
        If UBound($g_aTableColumns) > 0 Then
            _LogInfo("Verfügbare Spalten: " & _ArrayToString($g_aTableColumns, ", "))
            For $i = 0 To UBound($g_aTableColumns) - 1
                If $g_aTableColumns[$i] <> "" Then
                    ; Entweder wenn es mit dem Suchbegriff beginnt oder wir nach einem Punkt sind
                    If StringLen($sUpperCurrentWord) = 0 Or StringLeft(StringUpper($g_aTableColumns[$i]), StringLen($sUpperCurrentWord)) = $sUpperCurrentWord Then
                        ; Nur hinzufügen, wenn noch nicht im Array
                        If _ArraySearch($aMatches, $g_aTableColumns[$i]) = -1 Then
                            _ArrayAdd($aMatches, $g_aTableColumns[$i])
                            _LogInfo("Spaltennamen-Match hinzugefügt: " & $g_aTableColumns[$i])
                        EndIf
                    EndIf
                EndIf
            Next
        Else
            _LogInfo("Keine Spalten verfügbar")
        EndIf
    EndIf
    
    ; Kontext-spezifische Analyse
    Local $sTextBeforeCursor = StringLeft($sText, $iCursorPos)
    
    ; Prüfen ob wir im FROM- oder JOIN-Kontext sind (=> Tabellennamen vorrangig)
    If StringRegExp(StringUpper($sTextBeforeCursor), "(FROM|JOIN)\s+[^\s,;]* *$") Then
        _LogInfo("FROM oder JOIN Kontext erkannt - Tabellennamen bevorzugen")
        ; Zusätzlich alle Tabellennamen auflisten, auch wenn sie nicht mit dem aktuellen Wort beginnen
        Local $sTables = GUICtrlRead($g_idTableCombo, 1)
        If $sTables <> "" Then
            Local $aTableList = StringSplit($sTables, "|", $STR_NOCOUNT)
            For $i = 0 To UBound($aTableList) - 1
                If $aTableList[$i] <> "" Then
                    ; Nur hinzufügen, wenn noch nicht im Array
                    If _ArraySearch($aMatches, $aTableList[$i]) = -1 Then
                        _ArrayAdd($aMatches, $aTableList[$i])
                        _LogInfo("Tabellennamen zum FROM/JOIN-Kontext hinzugefügt: " & $aTableList[$i])
                    EndIf
                EndIf
            Next
        EndIf
    EndIf
    
    ; Nach einem Tabellennamen und einem Punkt (table.) prüfen wir auf Spaltennamen
    If StringRegExp($sTextBeforeCursor, "([a-zA-Z0-9_]+)\.$") Then
        _LogInfo("Tabelle mit Punkt erkannt - Spaltennamen bevorzugen")
        ; Tabellennamen aus dem Text extrahieren
        Local $aTableMatch = StringRegExp($sTextBeforeCursor, "([a-zA-Z0-9_]+)\.$", $STR_REGEXPARRAYMATCH)
        If IsArray($aTableMatch) And UBound($aTableMatch) > 0 Then
            Local $sTableName = $aTableMatch[0]
            _LogInfo("Tabellenname aus Pattern: " & $sTableName)
            
            ; Wenn es sich um die aktuelle Tabelle handelt, alle Spaltennamen anzeigen
            If $sTableName = $g_sCurrentTable And UBound($g_aTableColumns) > 0 Then
                ; Alle Spaltennamen der aktuellen Tabelle anzeigen
                Local $aNewMatches[0]  ; Liste zurücksetzen, nur Spaltennamen anzeigen
                For $i = 0 To UBound($g_aTableColumns) - 1
                    If $g_aTableColumns[$i] <> "" Then
                        _ArrayAdd($aNewMatches, $g_aTableColumns[$i])
                        _LogInfo("Spaltenname für Tabelle hinzugefügt: " & $g_aTableColumns[$i])
                    EndIf
                Next
                Return $aNewMatches
            EndIf
        EndIf
    EndIf
    
    _LogInfo("Finale Anzahl der Matches: " & UBound($aMatches))
    Return $aMatches
EndFunc

; ===============================================================================================================================
; Func.....: _ShowAutoCompleteList
; Beschreibung: Zeigt die Autovervollständigungsliste mit den gegebenen Vorschlägen an
; Parameter.: $aMatches - Array mit Vorschlägen
; Rückgabe..: Keine
; ===============================================================================================================================
Func _ShowAutoCompleteList($aMatches)
    Local $iEntryCount = UBound($aMatches)
    
    If $iEntryCount = 0 Then
        If $g_hList <> 0 And IsHWnd($g_hList) Then
            GUICtrlSetState($g_hListGUICtrlHandle, $GUI_HIDE)
            ; Neu zeichnen um Artefakte zu vermeiden
            _WinAPI_RedrawWindow($g_hGUI, 0, 0, BitOR($RDW_INVALIDATE, $RDW_ERASE, $RDW_ALLCHILDREN, $RDW_UPDATENOW))
        EndIf
        Return
    EndIf
    
    _LogInfo("Zeige Autovervollständigung mit " & $iEntryCount & " Vorschlägen")
    
    ; Sicherstellen, dass die Liste existiert
    If $g_hList = 0 Or Not IsHWnd($g_hList) Then
        _InitSQLAutoComplete($g_hGUI, $g_hSQLRichEdit)
    EndIf
    
    ; Position der Liste berechnen
    Local $aPosition = _GetAutoCompletePosition()
    
    ; Vorbereitungen für die Anzeige
    _GUICtrlListBox_ResetContent($g_hList)
    _GUICtrlListBox_BeginUpdate($g_hList)
    
    ; Listengröße anpassen - höher machen, wenn viele Einträge vorhanden sind
    Local $iHeight = _Min(180, _Max(60, $iEntryCount * 20)) ; Mindestens 60px, maximal 180px
    Local $iWidth = 280 ; Standardbreite
    
    ; Bei langen Einträgen die Breite anpassen
    For $i = 0 To $iEntryCount - 1
        $iWidth = _Max($iWidth, StringLen($aMatches[$i]) * 10) ; Ungefähr 10 Pixel pro Zeichen
    Next
    $iWidth = _Min(400, $iWidth) ; Nicht breiter als 400px
    
    ; Listen-Eigenschaften setzen
    ControlMove($g_hGUI, "", $g_hListGUICtrlHandle, $aPosition[0], $aPosition[1], $iWidth, $iHeight)
    
    ; Z-Order setzen, damit die Liste ÜBER allem anderen liegt
    _WinAPI_SetWindowPos($g_hList, $HWND_TOPMOST, 0, 0, 0, 0, BitOR($SWP_NOMOVE, $SWP_NOSIZE))
    
    ; Daten setzen
    For $i = 0 To $iEntryCount - 1
        _GUICtrlListBox_AddString($g_hList, $aMatches[$i])
    Next
    
    ; Update beenden
    _GUICtrlListBox_EndUpdate($g_hList)
    
    ; Neuzeichnen erzwingen - wichtig für die Vermeidung von Artefakten
    _WinAPI_RedrawWindow($g_hList, 0, 0, BitOR($RDW_INVALIDATE, $RDW_UPDATENOW, $RDW_ERASE, $RDW_FRAME))
    _WinAPI_RedrawWindow($g_hGUI, 0, 0, BitOR($RDW_INVALIDATE, $RDW_UPDATENOW, $RDW_ALLCHILDREN))
    
    ; Liste anzeigen
    GUICtrlSetState($g_hListGUICtrlHandle, $GUI_SHOW)
    
    ; Ersten Eintrag auswählen
    $g_iListIndex = 0
    _GUICtrlListBox_SetCurSel($g_hList, $g_iListIndex)
EndFunc

; ===============================================================================================================================
; Func.....: _GetCurrentWord
; Beschreibung: Ermittelt das Wort unter der aktuellen Cursor-Position
; Parameter.: $sText - Der Gesamttext
;             $iCursorPos - Die aktuelle Cursor-Position
;             ByRef $iStart - Rückgabewert für die Startposition des Wortes
; Rückgabe..: Das aktuelle Wort
; ===============================================================================================================================
Func _GetCurrentWord($sText, $iCursorPos, ByRef $iStart)
    If $iCursorPos < 1 Then
        $iStart = 0
        Return ""
    EndIf

    ; Startposition des Wortes ermitteln
    $iStart = $iCursorPos
    While $iStart > 0 And StringRegExp(StringMid($sText, $iStart, 1), "[a-zA-Z0-9_.]")
        $iStart -= 1
    WEnd
    $iStart += 1

    ; Wort aus dem Text extrahieren
    Return StringMid($sText, $iStart, $iCursorPos - $iStart + 1)
EndFunc

; ===============================================================================================================================
; Func.....: _AcceptSQLAutoCompleteSelection
; Beschreibung: Übernimmt den ausgewählten Eintrag aus der Autovervollständigungsliste
; Parameter.: Keine
; Rückgabe..: True bei Erfolg, False bei Fehler
; ===============================================================================================================================
Func _AcceptSQLAutoCompleteSelection()
    ; Prüfen, ob Liste sichtbar ist
    If $g_hList = 0 Or Not IsHWnd($g_hList) Or BitAND(GUICtrlGetState($g_hListGUICtrlHandle), $GUI_SHOW) <> $GUI_SHOW Then
        _LogInfo("Liste nicht sichtbar, keine Auswahl möglich")
        Return False
    EndIf

    ; Aktuell ausgewählten Index prüfen
    Local $iSelIndex = _GUICtrlListBox_GetCurSel($g_hList)
    If $iSelIndex < 0 Then
        _LogInfo("Keine Auswahl in der Liste getroffen")
        Return False
    EndIf

    ; Ausgewählten Eintrag aus der Liste holen
    Local $sItem = _GUICtrlListBox_GetText($g_hList, $iSelIndex)
    If $sItem = "" Then
        _LogInfo("Ausgewählter Eintrag ist leer")
        Return False
    EndIf

    _LogInfo("Ausgewählter Eintrag: '" & $sItem & "', wird jetzt eingefügt")
    _LogInfo("Wortposition: Start=" & $g_iWordStartPos & ", Ende=" & $g_iWordEndPos)

    ; Sicherstellen, dass die Wortposition korrekt ist
    If $g_iWordStartPos < 1 Or $g_iWordEndPos < $g_iWordStartPos Then
        _LogInfo("Ungültige Wortpositionen, verwende aktuelle Cursor-Position")
        ; Aktuelle Cursorposition holen
        Local $aSel = _GUICtrlRichEdit_GetSel($g_hSQLRichEdit)
        If @error Then
            _LogInfo("Fehler beim Ermitteln der aktuellen Cursor-Position")
            Return False
        EndIf

        ; Wortposition neu berechnen
        Local $sText = _GUICtrlRichEdit_GetText($g_hSQLRichEdit)
        $g_sCurrentWord = _GetCurrentWord($sText, $aSel[0], $g_iWordStartPos)
        $g_iWordEndPos = $aSel[0]
    EndIf

    ; Text ersetzen
    _GUICtrlRichEdit_SetSel($g_hSQLRichEdit, $g_iWordStartPos - 1, $g_iWordEndPos)
    _GUICtrlRichEdit_ReplaceText($g_hSQLRichEdit, $sItem)

    ; Liste ausblenden
    GUICtrlSetState($g_hListGUICtrlHandle, $GUI_HIDE)
    
    ; Gesamtes Anwendungsfenster neu zeichnen um Artefakte zu beseitigen
    _WinAPI_RedrawWindow($g_hGUI, 0, 0, BitOR($RDW_INVALIDATE, $RDW_ERASE, $RDW_FRAME, $RDW_ALLCHILDREN, $RDW_UPDATENOW))
    Sleep(10) ; Kurze Pause um sicherzustellen, dass die Zeichenoperation abgeschlossen ist

    ; Status zurücksetzen
    $g_sCurrentWord = ""

    ; Fokus auf RichEdit setzen
    _WinAPI_SetFocus($g_hSQLRichEdit)

    ; Statusmeldung anzeigen
    If $g_idStatus <> 0 Then
        GUICtrlSetData($g_idStatus, "Autovervollständigung: '" & $sItem & "' eingefügt")
    EndIf

    _LogInfo("Autovervollständigung erfolgreich: '" & $sItem & "' eingefügt")
    Return True
EndFunc

; ===============================================================================================================================
; Func.....: _HandleSQLAutocompleteKeys
; Beschreibung: Verarbeitet Tasteneingaben für die Autovervollständigung
; Parameter.: $hWnd - Handle des Fensters
;             $iMsg - Nachrichtentyp
;             $wParam - Zusätzliche Informationen
;             $lParam - Zusätzliche Informationen
; Rückgabe..: True wenn verarbeitet, False wenn nicht
; ===============================================================================================================================
Func _HandleSQLAutocompleteKeys($hWnd, $iMsg, $wParam, $lParam)
    ; Nur wenn SQL-Editor aktiv ist und Autovervollständigung aktiviert
    If Not $g_bSQLEditorMode Or Not $g_bAutoCompleteActive Then Return False

    ; Taste extrahieren
    Local $iKey = $wParam

    ; Prüfen, ob Liste sichtbar ist
    Local $bListVisible = ($g_hList <> 0 And IsHWnd($g_hList) And BitAND(GUICtrlGetState($g_hListGUICtrlHandle), $GUI_SHOW) = $GUI_SHOW)

    ; Wenn Liste sichtbar ist, Tasten für die Navigation verarbeiten
    If $bListVisible Then
        ; ESC-Taste zum Ausblenden der Liste
        If $iKey = 0x1B Then  ; VK_ESCAPE
            _LogInfo("ESC-Taste gedrückt - Liste ausblenden")
            GUICtrlSetState($g_hListGUICtrlHandle, $GUI_HIDE)
            Return True
        EndIf

        ; Pfeil runter
        If $iKey = 0x28 Then  ; VK_DOWN
            _LogInfo("Pfeil runter gedrückt - Nächster Eintrag")
            $g_iListIndex += 1
            If $g_iListIndex >= _GUICtrlListBox_GetCount($g_hList) Then $g_iListIndex = 0
            _GUICtrlListBox_SetCurSel($g_hList, $g_iListIndex)
            Return True
        EndIf

        ; Pfeil hoch
        If $iKey = 0x26 Then  ; VK_UP
            _LogInfo("Pfeil hoch gedrückt - Vorheriger Eintrag")
            $g_iListIndex -= 1
            If $g_iListIndex < 0 Then $g_iListIndex = _GUICtrlListBox_GetCount($g_hList) - 1
            _GUICtrlListBox_SetCurSel($g_hList, $g_iListIndex)
            Return True
        EndIf

        ; Enter oder Tab zum Übernehmen der Auswahl
        If $iKey = 0x0D Or $iKey = 0x09 Then  ; VK_RETURN oder VK_TAB
            _LogInfo("Enter/Tab gedrückt - Auswahl übernehmen")
            _AcceptSQLAutoCompleteSelection()
            Return True
        EndIf
    EndIf

    ; Strg+Leertaste zum Anzeigen der Autovervollständigung
    If $iKey = 0x20 And _IsCtrlPressed() Then  ; VK_SPACE
        _CheckSQLInputForAutoComplete()
        Return True
    EndIf

    Return False
EndFunc

; ===============================================================================================================================
; Func.....: _IsCtrlPressed
; Beschreibung: Prüft, ob die Strg-Taste gedrückt ist
; Parameter.: Keine
; Rückgabe..: True wenn Strg gedrückt ist, sonst False
; ===============================================================================================================================
Func _IsCtrlPressed()
    ; Verwende _IsPressed aus <Misc.au3> statt _WinAPI_GetKeyState
    Return _IsPressed("11") ; VK_CONTROL
EndFunc

; ===============================================================================================================================
; Func.....: _GetAutoCompletePosition
; Beschreibung: Berechnet die Position für die Autovervollständigungsliste basierend auf der Cursor-Position
; Parameter.: Keine
; Rückgabe..: Array mit X- und Y-Koordinaten [X, Y]
; ===============================================================================================================================
Func _GetAutoCompletePosition()
    Local $aPos[2] = [0, 0]

    ; Position des RichEdit-Controls im Fenster ermitteln
    Local $aRichEditPos = ControlGetPos($g_hGUI, "", $g_hSQLRichEdit)
    If Not IsArray($aRichEditPos) Then Return $aPos

    ; Cursor-Position im Text ermitteln
    Local $aSel = _GUICtrlRichEdit_GetSel($g_hSQLRichEdit)
    If @error Then Return $aPos

    Local $iCursorPos = $aSel[0]
    Local $sText = _GUICtrlRichEdit_GetText($g_hSQLRichEdit)

    ; Anzahl der Zeilen vor dem Cursor zählen (für Y-Position)
    Local $iLineCount = StringRegExpReplace(StringLeft($sText, $iCursorPos), "[^\n]", "")
    Local $iLineIndex = StringLen($iLineCount)

    ; Position in der aktuellen Zeile ermitteln (für X-Position)
    Local $iLastNewline = StringInStr($sText, @LF, 0, -1, $iCursorPos)
    Local $iColIndex = $iCursorPos - $iLastNewline
    If $iLastNewline = 0 Then $iColIndex = $iCursorPos

    ; Ungefähre Pixel-Position berechnen (10 Pixel pro Zeichen, 18 Pixel pro Zeile)
    $aPos[0] = $aRichEditPos[0] + ($iColIndex * 10)
    $aPos[1] = $aRichEditPos[1] + (($iLineIndex + 1) * 18)

    ; Sicherstellen, dass die Liste im Fenster bleibt
    If $aPos[0] + 250 > $aRichEditPos[0] + $aRichEditPos[2] Then
        $aPos[0] = $aRichEditPos[0] + $aRichEditPos[2] - 260
    EndIf

    If $aPos[1] + 120 > $aRichEditPos[1] + $aRichEditPos[3] Then
        $aPos[1] = $aPos[1] - 140
    EndIf

    Return $aPos
EndFunc

; ===============================================================================================================================
; Func.....: _HandleSQLAutoCompleteEvent
; Beschreibung: Event-Handler für Doppelklick in der Autovervollständigungsliste
; Parameter.: $iCtrlID - Control-ID des Events
; Rückgabe..: True wenn Event verarbeitet wurde, sonst False
; ===============================================================================================================================
Func _HandleSQLAutoCompleteEvent($iCtrlID)
    ; Nur bei Autovervollständigung und wenn Liste sichtbar
    If Not $g_bSQLEditorMode Or Not $g_bAutoCompleteActive Then Return False
    If $g_hList = 0 Or Not IsHWnd($g_hList) Then Return False
    
    ; Prüfen, ob das Event von der Liste stammt
    If $iCtrlID = $g_hListGUICtrlHandle Then
        _AcceptSQLAutoCompleteSelection()
        Return True
    EndIf

    Return False
EndFunc

; ===============================================================================================================================
; Func.....: _InitSQLEditorAutocompleteFix
; Beschreibung: Initialisiert die Autovervollständigung für den SQL-Editor
; Parameter.: Keine
; Rückgabe..: True bei Erfolg, False bei Fehler
; ===============================================================================================================================
Func _InitSQLEditorAutocompleteFix()
    _LogInfo("Initialisiere SQL-Editor-Autovervollständigung")

    ; Autovervollständigung initialisieren
    If Not _InitSQLAutoComplete($g_hGUI, $g_hSQLRichEdit) Then
        _LogError("Fehler beim Initialisieren der Autovervollständigung")
        Return False
    EndIf

    ; Tabellen- und Spaltenliste protokollieren
    _DebugMetadataInfo()

    ; Autovervollständigung aktivieren
    _StartSQLAutoComplete()

    Return True
EndFunc

; ===============================================================================================================================
; Func.....: _ShowSQLCompletionListFix
; Beschreibung: Zeigt die Autovervollständigungsliste manuell an
; Parameter.: Keine
; Rückgabe..: True bei Erfolg, False bei Fehler
; ===============================================================================================================================
Func _ShowSQLCompletionListFix()
    _LogInfo("Manuelle Anzeige der Autovervollständigungsliste")

    ; Sicherstellen, dass SQL-Editor aktiv ist
    If Not $g_bSQLEditorMode Then
        _LogInfo("SQL-Editor nicht aktiv")
        Return False
    EndIf

    ; Autovervollständigung bei Bedarf initialisieren
    If Not $g_bAutoCompleteActive Then
        _InitSQLEditorAutocompleteFix()
    EndIf

    ; Manuell prüfen und anzeigen
    _CheckSQLInputForAutoComplete()

    Return True
EndFunc

; ===============================================================================================================================
; Func.....: _DebugMetadataInfo
; Beschreibung: Protokolliert Informationen über die verfügbaren Tabellen und Spalten für die Autovervollständigung
; Parameter.: Keine
; Rückgabe..: Keine
; ===============================================================================================================================
Func _DebugMetadataInfo()
    _LogInfo("=== Debug: Metadaten-Information ===")
    
    ; Aktuelle Datenbank
    _LogInfo("Aktuelle Datenbank: " & ($g_sCurrentDB <> "" ? $g_sCurrentDB : "<keine>"))
    
    ; Aktuelle Tabelle
    _LogInfo("Aktuelle Tabelle: " & ($g_sCurrentTable <> "" ? $g_sCurrentTable : "<keine>"))
    
    ; Alle verfügbaren Tabellen protokollieren
    Local $sTables = GUICtrlRead($g_idTableCombo, 1)
    If $sTables <> "" Then
        Local $aTableList = StringSplit($sTables, "|", $STR_NOCOUNT)
        _LogInfo("Verfügbare Tabellen (" & UBound($aTableList) & "): " & _ArrayToString($aTableList, ", "))
    Else
        _LogInfo("Keine Tabellen in der ComboBox gefunden")
    EndIf
    
    ; Spalten der aktuellen Tabelle protokollieren
    If UBound($g_aTableColumns) > 0 Then
        _LogInfo("Spalten für aktuelle Tabelle (" & UBound($g_aTableColumns) & "): " & _ArrayToString($g_aTableColumns, ", "))
    Else
        _LogInfo("Keine Spalten für die aktuelle Tabelle gefunden")
        
        ; Versuch, die Spalten manuell zu laden
        If $g_sCurrentDB <> "" And $g_sCurrentTable <> "" Then
            _LogInfo("Versuche, Spalten manuell zu laden...")
            $g_aTableColumns = _GetTableColumns($g_sCurrentDB, $g_sCurrentTable)
            If UBound($g_aTableColumns) > 0 Then
                _LogInfo("Spalten manuell geladen (" & UBound($g_aTableColumns) & "): " & _ArrayToString($g_aTableColumns, ", "))
            Else
                _LogInfo("Manuelles Laden der Spalten fehlgeschlagen")
            EndIf
        EndIf
    EndIf
    
    ; SQL-Keywords aus sql_keywords.au3 prüfen
    _LogInfo("SQL Keywords verfügbar: " & (IsDeclared("g_aSQL_AllKeywords") ? "Ja (" & UBound($g_aSQL_AllKeywords) & ")" : "Nein"))
    _LogInfo("SQL Funktionen verfügbar: " & (IsDeclared("g_aSQL_Functions") ? "Ja (" & UBound($g_aSQL_Functions) & ")" : "Nein"))
    _LogInfo("SQL Datentypen verfügbar: " & (IsDeclared("g_aSQL_DataTypes") ? "Ja (" & UBound($g_aSQL_DataTypes) & ")" : "Nein"))
    
    _LogInfo("=== Ende Debug: Metadaten-Information ===")
EndFunc

; ===============================================================================================================================
; Func.....: _LoadTableColumnsAlternative
; Beschreibung: Alternative Methode zum Laden von Tabellenspalten mit direkter SQL-Abfrage
; Parameter.: $sDatabase - Pfad zur Datenbank
;             $sTable - Name der Tabelle
; Rückgabe..: True bei Erfolg, False bei Fehler
; ===============================================================================================================================
Func _LoadTableColumnsAlternative($sDatabase, $sTable)
    _LogInfo("Alternative Methode zum Laden der Spalten für Tabelle: " & $sTable)
    
    ; Sicherstellen, dass Datenbank vorhanden ist
    If Not FileExists($sDatabase) Then
        _LogError("Datenbank existiert nicht: " & $sDatabase)
        Return False
    EndIf
    
    ; Sicherstellen, dass Tabelle vorhanden ist
    If $sTable = "" Then
        _LogError("Kein Tabellenname angegeben")
        Return False
    EndIf
    
    _LogInfo("Direkte PRAGMA-Abfrage für Tabellenspalten")
    
    ; Direkte SQLite-Abfrage für Spaltennamen mit PRAGMA
    Local $hDB
    _SQLite_Startup()
    If @error Then
        _LogError("Fehler beim Starten der SQLite-Engine")
        Return False
    EndIf
    
    Local $iResult = _SQLite_Open($sDatabase, $SQLITE_OPEN_READONLY, $hDB)
    If $iResult <> $SQLITE_OK Then
        _LogError("Fehler beim Öffnen der Datenbank: " & _SQLite_ErrMsg())
        _SQLite_Shutdown()
        Return False
    EndIf
    
    ; Array für Spaltennamen
    Local $aColumns[0]
    
    ; Erste Methode: PRAGMA table_info
    Local $hQuery, $aRow
    $iResult = _SQLite_Query($hDB, "PRAGMA table_info('" & $sTable & "');", $hQuery)
    If $iResult = $SQLITE_OK Then
        _LogInfo("PRAGMA-Abfrage erfolgreich ausgeführt")
        
        While _SQLite_FetchData($hQuery, $aRow, False, False) = $SQLITE_OK
            ; Spaltenname ist in Index 1
            If IsArray($aRow) And UBound($aRow) > 1 Then
                _ArrayAdd($aColumns, $aRow[1])
                _LogInfo("Spalte gefunden: " & $aRow[1])
            EndIf
        WEnd
        _SQLite_QueryFinalize($hQuery)
    Else
        _LogError("Fehler bei PRAGMA-Abfrage: " & _SQLite_ErrMsg())
    EndIf
    
    ; Wenn keine Spalten gefunden wurden, alternative Methode versuchen
    If UBound($aColumns) = 0 Then
        _LogInfo("Keine Spalten mit PRAGMA gefunden, versuche SELECT * LIMIT 0")
        
        $iResult = _SQLite_Query($hDB, "SELECT * FROM '" & $sTable & "' LIMIT 0;", $hQuery)
        If $iResult = $SQLITE_OK Then
            Local $iRows = 0, $iCols = 0
            Local $iResult = _SQLite_GetTable2d($hDB, "SELECT * FROM '" & $sTable & "' LIMIT 0;", $aRow, $iRows, $iCols)
            If $iResult = $SQLITE_OK And $iRows > 0 And IsArray($aRow) Then
                _LogInfo("Spalten mit SELECT gefunden: " & $iCols)
                ; Erste Zeile enthält Spaltennamen
                Local $aNewColumns[0]
                For $i = 0 To $iCols - 1
                    _ArrayAdd($aNewColumns, $aRow[0][$i])
                    _LogInfo("Spalte gefunden: " & $aRow[0][$i])
                Next
                $aColumns = $aNewColumns
            Else
                _LogError("Fehler bei SELECT-Abfrage: " & _SQLite_ErrMsg())
            EndIf
            
            ; Abfrage finalisieren
            _SQLite_QueryFinalize($hQuery)
        Else
            _LogError("Fehler beim Abrufen der Spaltennamen mit SELECT")
        EndIf
    EndIf
    
    ; Datenbank schließen
    _SQLite_Close($hDB)
    _SQLite_Shutdown()
    
    ; Globales Array aktualisieren
    If UBound($aColumns) > 0 Then
        $g_aTableColumns = $aColumns
        _LogInfo("Spalten erfolgreich geladen: " & UBound($aColumns))
        Return True
    Else
        _LogError("Keine Spalten für Tabelle '" & $sTable & "' gefunden")
        Return False
    EndIf
EndFunc